name: Set up Terraform

on:
    push:
        branches:
            - master

jobs:
    terraform:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup terraform
              uses: hashicorp/setup-terraform@v1

            - name: Terraform init
              env:
                  TF_VAR_ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                  TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
                  TF_VAR_ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                  TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  TF_VAR_GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
                  TF_VAR_GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
              run: terraform init

            - name: Terraform plan
              env:
                  TF_VAR_ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                  TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
                  TF_VAR_ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                  TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  TF_VAR_GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
                  TF_VAR_GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
              run: |
                  terraform plan -input=false

            - name: Terraform apply
              env:
                  TF_VAR_ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                  TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
                  TF_VAR_ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                  TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  TF_VAR_GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
                  TF_VAR_GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
              run: |
                  az login --service-principal --username $TF_VAR_ARM_CLIENT_ID --password $TF_VAR_ARM_CLIENT_SECRET --tenant $TF_VAR_ARM_TENANT_ID

                  # Check if resource group exists in Azure and import if exists
                  az resource show --id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-rg" &>/dev/null && terraform import azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-rg || echo "Resource azurerm_resource_group.rg does not exist"

                  # Check if virtual network exists in Azure and import if exists
                  az resource show --id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-vnet" &>/dev/null && terraform import azurerm_virtual_network.vnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-vnet || echo "Resource azurerm_virtual_network.vnet does not exist"

                  # Check if subnet exists in Azure and import if exists
                  az resource show --id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-subnet" &>/dev/null && terraform import azurerm_subnet.subnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-subnet || echo "Resource azurerm_subnet.subnet does not exist"

                  # Check if public IP exists in Azure and import if exists
                  az resource show --id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-public-ip" &>/dev/null && terraform import azurerm_public_ip.public_ip /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-public-ip || echo "Resource azurerm_public_ip.public_ip does not exist"

                  # Check if network interface exists in Azure and import if exists
                  az resource show --id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-nic" &>/dev/null && terraform import azurerm_network_interface.nic /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-nic || echo "Resource azurerm_network_interface.nic does not exist"

                  # Check if network security group exists in Azure and import if exists
                  az resource show --id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-nsg" &>/dev/null && terraform import azurerm_network_security_group.nsg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-nsg || echo "Resource azurerm_network_security_group.nsg does not exist"

                  # Check if virtual machine exists in Azure and import if exists
                  az resource show --id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-vm" &>/dev/null && terraform import azurerm_linux_virtual_machine.vm /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/nodeapp-vm || echo "Resource azurerm_linux_virtual_machine.vm does not exist"

                  # Apply Terraform
                  terraform apply -input=false -auto-approve
